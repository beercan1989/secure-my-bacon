swagger: "2.0"

info:
  version: "0.0.1"
  title: "Secure My Bacon"

paths:
  /bags:
    get:
      description: "Get all bags"
      parameters:
        - $ref: "#/parameters/Page"
        - $ref: "#/parameters/PerPage"
      responses:
        200:
          description: "List of all bags in the system"
          schema:
            $ref: "#/definitions/PaginatedBagResult"
          examples:
            application/json:
              data:
                - id: 0
                  name: "bag 1"
              paging:
                page: 0
                perPage: 1
                totalCount: 200
        400:
          description: "Validation failures"
          schema:
            $ref: "#/definitions/ValidationErrors"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec10"
              errors:
                - "Page '-5' must be greater than or equal to 0"
                - "PerPage '50' must be less than or equal to 20"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Exception"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec11"
              name: "java.lang.NullPointerException"

  /users:
    get:
      description: "Get all users"
      parameters:
        - $ref: "#/parameters/Page"
        - $ref: "#/parameters/PerPage"
      responses:
        200:
          description: "List of all users in the system"
          schema:
            $ref: "#/definitions/PaginatedUserResult"
        400:
          description: "Validation failures"
          schema:
            $ref: "#/definitions/ValidationErrors"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec10"
              errors:
                - "Page '-5' must be greater than or equal to 0"
                - "PerPage '50' must be less than or equal to 20"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Exception"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec11"
              name: "java.lang.NullPointerException"

    post:
      description: "Create a new user"
      parameters:
        - name: user
          in: body
          description: "Details required to create a new User"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "The name of the user"
      responses:
        200:
          description: "The new user with database id"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Validation failures"
          schema:
            $ref: "#/definitions/ValidationErrors"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec10"
              errors:
                - "UserName must not be blank"
                - "UserName 'w.smithers' is already in use"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Exception"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec11"
              name: "java.lang.NullPointerException"

  /users/by-id/{userId}:
    get:
      description: "Retrieve User by id"
      parameters:
        - name: userId
          in: path
          description: "ID of the User to fetch"
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: "The requested user"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "No User exists with that ID"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Exception"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec11"
              name: "java.lang.NullPointerException"

  /users/by-name/{userName}:
    get:
      description: "Retrieve User by name"
      parameters:
        - name: userName
          in: path
          description: "Name of the User to fetch"
          required: true
          type: string
      responses:
        200:
          description: "The requested user"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "No User exists with that name"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Exception"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec11"
              name: "java.lang.NullPointerException"

  /passwords:
    get:
      description: "Get all passwords"
      parameters:
        - $ref: "#/parameters/Page"
        - $ref: "#/parameters/PerPage"
      responses:
        200:
          description: "List of all passwords in the system"
          schema:
            $ref: "#/definitions/PaginatedPasswordResult"
        400:
          description: "Validation failures"
          schema:
            $ref: "#/definitions/ValidationErrors"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec10"
              errors:
                - "Page '-5' must be greater than or equal to 0"
                - "PerPage '50' must be less than or equal to 20"
        500:
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/Exception"
          examples:
            application/json:
              uuid: "72e7947e-9561-4297-844a-70179560ec11"
              name: "java.lang.NullPointerException"

definitions:

  PaginatedBagResult:
    description: "Paginated result set of bags"
    type: object
    properties:
      data:
        title: Bags
        description: "List of bags, limited by pagination"
        type: array
        items:
          $ref: "#/definitions/Bag"
      paging:
        $ref: "#/definitions/Pagination"

  Bag:
    type: object
    description: "Bag providing links to Passwords"
    properties:
      id: 
        $ref: "#/definitions/DatabaseID"
      name:
        description: "the display name of the bag"
        type: string
  
  PaginatedUserResult:
    description: "Paginated result set of users"
    type: object
    properties:
      data:
        title: Users
        description: "List of users, limited by pagination"
        type: array
        items:
          $ref: "#/definitions/User"
      paging:
        $ref: "#/definitions/Pagination"
  
  User:
    type: object
    description: "Represents a User of the system"
    properties:
      id:
        $ref: "#/definitions/DatabaseID"
      name:
        description: "the login identifier for the user"
        type: string
  
  PaginatedPasswordResult:
    description: "Paginated result set of passwords"
    type: object
    properties:
      data:
        title: Users
        description: "List of passwords, limited by pagination"
        type: array
        items:
          $ref: "#/definitions/EncryptedPassword"
      paging:
        $ref: "#/definitions/Pagination"
  
  Password:
    type: object
    description: "Holds the encrypted data, along with where it is for and which account"
    properties:
      id: 
        $ref: "#/definitions/DatabaseID"
      whereFor:
        description: "information describing where the password is for"
        type: string
      username:
        description: "usually the username to be used when logging in"
        type: string
      password:
        description: "the data that is stored in an encrypted state"
        type: string
        
  DatabaseID:
    title: Neo4J ID
    description: "the database id"
    type: integer
    format: int32
  
  Pagination:
    type: object
    description: "Pagination details"
    properties:
      page:
        description: "the offset for pagination"
        type: integer
        format: int32
      perPage:
        description: "the number of results per page"
        type: integer
        format: int32
      totalCount:
        description: "the total number of possible results"
        type: integer
        format: int64

  ValidationErrors:
    type: object
    description: "Validation failure response"
    properties:
      uuid:
        type: string
        description: "The ID placed in the logs, for investigation purposes."
      errors:
        type: array
        description: "Collection of the validation failures."
        items:
          $ref: "#/definitions/ValidationError"

  ValidationError:
    type: string
    description: "A message explaining the validation failure."
    
  Exception:
    type: object
    description: "Basic information about the exception."
    properties:
      uuid:
        type: string
        description: "The ID placed in the logs, for investigation purposes."
      name:
        type: string
        description: "The class name of the exception thrown."

parameters:

  Page:
    name: page
    in: query
    required: false
    type: integer
    format: int32
    default: 1
    minimum: 1
  
  PerPage:
    name: perPage
    in: query
    required: false
    type: integer
    format: int32
    default: 5
    minimum: 1
    maximum: 20
